//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BloodDonation.HospitalClient.WebService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/BloodDonation.DTO")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BloodTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CounterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DonorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAlltimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAvaiableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLocationAvField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMessageAvField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BloodType {
            get {
                return this.BloodTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.BloodTypeField, value) != true)) {
                    this.BloodTypeField = value;
                    this.RaisePropertyChanged("BloodType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Counter {
            get {
                return this.CounterField;
            }
            set {
                if ((this.CounterField.Equals(value) != true)) {
                    this.CounterField = value;
                    this.RaisePropertyChanged("Counter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DonorId {
            get {
                return this.DonorIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DonorIdField, value) != true)) {
                    this.DonorIdField = value;
                    this.RaisePropertyChanged("DonorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAlltimes {
            get {
                return this.IsAlltimesField;
            }
            set {
                if ((this.IsAlltimesField.Equals(value) != true)) {
                    this.IsAlltimesField = value;
                    this.RaisePropertyChanged("IsAlltimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAvaiable {
            get {
                return this.IsAvaiableField;
            }
            set {
                if ((this.IsAvaiableField.Equals(value) != true)) {
                    this.IsAvaiableField = value;
                    this.RaisePropertyChanged("IsAvaiable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocationAv {
            get {
                return this.IsLocationAvField;
            }
            set {
                if ((this.IsLocationAvField.Equals(value) != true)) {
                    this.IsLocationAvField = value;
                    this.RaisePropertyChanged("IsLocationAv");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMessageAv {
            get {
                return this.IsMessageAvField;
            }
            set {
                if ((this.IsMessageAvField.Equals(value) != true)) {
                    this.IsMessageAvField = value;
                    this.RaisePropertyChanged("IsMessageAv");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Times", Namespace="http://schemas.datacontract.org/2004/07/BloodDonation.DTO")]
    [System.SerializableAttribute()]
    public partial class Times : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAvaiableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Day {
            get {
                return this.DayField;
            }
            set {
                if ((this.DayField.Equals(value) != true)) {
                    this.DayField = value;
                    this.RaisePropertyChanged("Day");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAvaiable {
            get {
                return this.IsAvaiableField;
            }
            set {
                if ((this.IsAvaiableField.Equals(value) != true)) {
                    this.IsAvaiableField = value;
                    this.RaisePropertyChanged("IsAvaiable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Hospital", Namespace="http://schemas.datacontract.org/2004/07/BloodDonation.DTO")]
    [System.SerializableAttribute()]
    public partial class Hospital : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DistrictField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HospitalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string District {
            get {
                return this.DistrictField;
            }
            set {
                if ((object.ReferenceEquals(this.DistrictField, value) != true)) {
                    this.DistrictField = value;
                    this.RaisePropertyChanged("District");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HospitalId {
            get {
                return this.HospitalIdField;
            }
            set {
                if ((this.HospitalIdField.Equals(value) != true)) {
                    this.HospitalIdField = value;
                    this.RaisePropertyChanged("HospitalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Notification", Namespace="http://schemas.datacontract.org/2004/07/BloodDonation.DTO")]
    [System.SerializableAttribute()]
    public partial class Notification : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BloodTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HospitalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HospitalNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HospitalUserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime NotiDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NotificationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BloodType {
            get {
                return this.BloodTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.BloodTypeField, value) != true)) {
                    this.BloodTypeField = value;
                    this.RaisePropertyChanged("BloodType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HospitalId {
            get {
                return this.HospitalIdField;
            }
            set {
                if ((this.HospitalIdField.Equals(value) != true)) {
                    this.HospitalIdField = value;
                    this.RaisePropertyChanged("HospitalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HospitalName {
            get {
                return this.HospitalNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HospitalNameField, value) != true)) {
                    this.HospitalNameField = value;
                    this.RaisePropertyChanged("HospitalName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HospitalUserId {
            get {
                return this.HospitalUserIdField;
            }
            set {
                if ((this.HospitalUserIdField.Equals(value) != true)) {
                    this.HospitalUserIdField = value;
                    this.RaisePropertyChanged("HospitalUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime NotiDate {
            get {
                return this.NotiDateField;
            }
            set {
                if ((this.NotiDateField.Equals(value) != true)) {
                    this.NotiDateField = value;
                    this.RaisePropertyChanged("NotiDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NotificationId {
            get {
                return this.NotificationIdField;
            }
            set {
                if ((this.NotificationIdField.Equals(value) != true)) {
                    this.NotificationIdField = value;
                    this.RaisePropertyChanged("NotificationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/BloodDonation.DTO")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HospitalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPersonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MessageDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HospitalId {
            get {
                return this.HospitalIdField;
            }
            set {
                if ((this.HospitalIdField.Equals(value) != true)) {
                    this.HospitalIdField = value;
                    this.RaisePropertyChanged("HospitalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPerson {
            get {
                return this.IsPersonField;
            }
            set {
                if ((this.IsPersonField.Equals(value) != true)) {
                    this.IsPersonField = value;
                    this.RaisePropertyChanged("IsPerson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MessageDate {
            get {
                return this.MessageDateField;
            }
            set {
                if ((this.MessageDateField.Equals(value) != true)) {
                    this.MessageDateField = value;
                    this.RaisePropertyChanged("MessageDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((this.MessageIdField.Equals(value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebService.WebService")]
    public interface WebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserRegister", ReplyAction="http://tempuri.org/WebService/UserRegisterResponse")]
        bool UserRegister(string UserId, string BloodType, int Counter, bool IsLocationAv, bool IsAlltimes, bool IsAvaiable, bool IsMessageAv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserRegister", ReplyAction="http://tempuri.org/WebService/UserRegisterResponse")]
        System.Threading.Tasks.Task<bool> UserRegisterAsync(string UserId, string BloodType, int Counter, bool IsLocationAv, bool IsAlltimes, bool IsAvaiable, bool IsMessageAv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectUser", ReplyAction="http://tempuri.org/WebService/SelectUserResponse")]
        BloodDonation.HospitalClient.WebService.User SelectUser(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectUser", ReplyAction="http://tempuri.org/WebService/SelectUserResponse")]
        System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.User> SelectUserAsync(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserUpdateTime", ReplyAction="http://tempuri.org/WebService/UserUpdateTimeResponse")]
        bool UserUpdateTime(string UserId, int Day, int Time, bool IsAvaiable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserUpdateTime", ReplyAction="http://tempuri.org/WebService/UserUpdateTimeResponse")]
        System.Threading.Tasks.Task<bool> UserUpdateTimeAsync(string UserId, int Day, int Time, bool IsAvaiable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectUserTime", ReplyAction="http://tempuri.org/WebService/SelectUserTimeResponse")]
        BloodDonation.HospitalClient.WebService.Times[] SelectUserTime(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectUserTime", ReplyAction="http://tempuri.org/WebService/SelectUserTimeResponse")]
        System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Times[]> SelectUserTimeAsync(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserDelete", ReplyAction="http://tempuri.org/WebService/UserDeleteResponse")]
        bool UserDelete(string DonorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserDelete", ReplyAction="http://tempuri.org/WebService/UserDeleteResponse")]
        System.Threading.Tasks.Task<bool> UserDeleteAsync(string DonorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserLocationUpdate", ReplyAction="http://tempuri.org/WebService/UserLocationUpdateResponse")]
        bool UserLocationUpdate(string UserId, string Name, bool IsLocationAv, decimal Latitude, decimal Longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserLocationUpdate", ReplyAction="http://tempuri.org/WebService/UserLocationUpdateResponse")]
        System.Threading.Tasks.Task<bool> UserLocationUpdateAsync(string UserId, string Name, bool IsLocationAv, decimal Latitude, decimal Longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectUserLocation", ReplyAction="http://tempuri.org/WebService/SelectUserLocationResponse")]
        BloodDonation.HospitalClient.WebService.Hospital[] SelectUserLocation(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectUserLocation", ReplyAction="http://tempuri.org/WebService/SelectUserLocationResponse")]
        System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Hospital[]> SelectUserLocationAsync(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectHospital", ReplyAction="http://tempuri.org/WebService/SelectHospitalResponse")]
        BloodDonation.HospitalClient.WebService.Hospital[] SelectHospital();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectHospital", ReplyAction="http://tempuri.org/WebService/SelectHospitalResponse")]
        System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Hospital[]> SelectHospitalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserLocationDelete", ReplyAction="http://tempuri.org/WebService/UserLocationDeleteResponse")]
        bool UserLocationDelete(string UserId, string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserLocationDelete", ReplyAction="http://tempuri.org/WebService/UserLocationDeleteResponse")]
        System.Threading.Tasks.Task<bool> UserLocationDeleteAsync(string UserId, string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserUpdateGeneral", ReplyAction="http://tempuri.org/WebService/UserUpdateGeneralResponse")]
        bool UserUpdateGeneral(string DonorId, string BloodType, int DonationCounter, bool IsLocationAv, bool IsAlltimes, bool IsAvaiable, bool IsMessageAv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UserUpdateGeneral", ReplyAction="http://tempuri.org/WebService/UserUpdateGeneralResponse")]
        System.Threading.Tasks.Task<bool> UserUpdateGeneralAsync(string DonorId, string BloodType, int DonationCounter, bool IsLocationAv, bool IsAlltimes, bool IsAvaiable, bool IsMessageAv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/ControlHospitalUser", ReplyAction="http://tempuri.org/WebService/ControlHospitalUserResponse")]
        bool ControlHospitalUser(int HospitalId, string UserName, string UserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/ControlHospitalUser", ReplyAction="http://tempuri.org/WebService/ControlHospitalUserResponse")]
        System.Threading.Tasks.Task<bool> ControlHospitalUserAsync(int HospitalId, string UserName, string UserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectNotification", ReplyAction="http://tempuri.org/WebService/SelectNotificationResponse")]
        BloodDonation.HospitalClient.WebService.Notification SelectNotification(int NotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectNotification", ReplyAction="http://tempuri.org/WebService/SelectNotificationResponse")]
        System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Notification> SelectNotificationAsync(int NotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UpdateStateNotification", ReplyAction="http://tempuri.org/WebService/UpdateStateNotificationResponse")]
        bool UpdateStateNotification(int NotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UpdateStateNotification", ReplyAction="http://tempuri.org/WebService/UpdateStateNotificationResponse")]
        System.Threading.Tasks.Task<bool> UpdateStateNotificationAsync(int NotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectUserNotificationAccept", ReplyAction="http://tempuri.org/WebService/SelectUserNotificationAcceptResponse")]
        void SelectUserNotificationAccept(int HospitalId, int UserId, string BloodType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SelectUserNotificationAccept", ReplyAction="http://tempuri.org/WebService/SelectUserNotificationAcceptResponse")]
        System.Threading.Tasks.Task SelectUserNotificationAcceptAsync(int HospitalId, int UserId, string BloodType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/DeleteAllUserLocations", ReplyAction="http://tempuri.org/WebService/DeleteAllUserLocationsResponse")]
        bool DeleteAllUserLocations(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/DeleteAllUserLocations", ReplyAction="http://tempuri.org/WebService/DeleteAllUserLocationsResponse")]
        System.Threading.Tasks.Task<bool> DeleteAllUserLocationsAsync(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UpdateAllUserTimes", ReplyAction="http://tempuri.org/WebService/UpdateAllUserTimesResponse")]
        bool UpdateAllUserTimes(string UserId, bool IsAvaiable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UpdateAllUserTimes", ReplyAction="http://tempuri.org/WebService/UpdateAllUserTimesResponse")]
        System.Threading.Tasks.Task<bool> UpdateAllUserTimesAsync(string UserId, bool IsAvaiable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/AddToken", ReplyAction="http://tempuri.org/WebService/AddTokenResponse")]
        bool AddToken(string UserId, string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/AddToken", ReplyAction="http://tempuri.org/WebService/AddTokenResponse")]
        System.Threading.Tasks.Task<bool> AddTokenAsync(string UserId, string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/NotificationAccept", ReplyAction="http://tempuri.org/WebService/NotificationAcceptResponse")]
        System.Data.DataTable NotificationAccept(int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/NotificationAccept", ReplyAction="http://tempuri.org/WebService/NotificationAcceptResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> NotificationAcceptAsync(int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/NotificationFinished", ReplyAction="http://tempuri.org/WebService/NotificationFinishedResponse")]
        bool NotificationFinished(int HospitalId, string BloodType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/NotificationFinished", ReplyAction="http://tempuri.org/WebService/NotificationFinishedResponse")]
        System.Threading.Tasks.Task<bool> NotificationFinishedAsync(int HospitalId, string BloodType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SendMessage", ReplyAction="http://tempuri.org/WebService/SendMessageResponse")]
        bool SendMessage(string UserId, int HospitalId, bool IsPerson, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/SendMessage", ReplyAction="http://tempuri.org/WebService/SendMessageResponse")]
        System.Threading.Tasks.Task<bool> SendMessageAsync(string UserId, int HospitalId, bool IsPerson, string Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/GetActiveNotification", ReplyAction="http://tempuri.org/WebService/GetActiveNotificationResponse")]
        BloodDonation.HospitalClient.WebService.Notification GetActiveNotification(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/GetActiveNotification", ReplyAction="http://tempuri.org/WebService/GetActiveNotificationResponse")]
        System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Notification> GetActiveNotificationAsync(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/GetNotFinishedNotification", ReplyAction="http://tempuri.org/WebService/GetNotFinishedNotificationResponse")]
        BloodDonation.HospitalClient.WebService.Notification GetNotFinishedNotification(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/GetNotFinishedNotification", ReplyAction="http://tempuri.org/WebService/GetNotFinishedNotificationResponse")]
        System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Notification> GetNotFinishedNotificationAsync(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/GetAllMessages", ReplyAction="http://tempuri.org/WebService/GetAllMessagesResponse")]
        BloodDonation.HospitalClient.WebService.Message[] GetAllMessages(string UserId, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/GetAllMessages", ReplyAction="http://tempuri.org/WebService/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Message[]> GetAllMessagesAsync(string UserId, int HospitalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UpdateReadNotification", ReplyAction="http://tempuri.org/WebService/UpdateReadNotificationResponse")]
        bool UpdateReadNotification(int NotificationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/WebService/UpdateReadNotification", ReplyAction="http://tempuri.org/WebService/UpdateReadNotificationResponse")]
        System.Threading.Tasks.Task<bool> UpdateReadNotificationAsync(int NotificationId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebServiceChannel : BloodDonation.HospitalClient.WebService.WebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceClient : System.ServiceModel.ClientBase<BloodDonation.HospitalClient.WebService.WebService>, BloodDonation.HospitalClient.WebService.WebService {
        
        public WebServiceClient() {
        }
        
        public WebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool UserRegister(string UserId, string BloodType, int Counter, bool IsLocationAv, bool IsAlltimes, bool IsAvaiable, bool IsMessageAv) {
            return base.Channel.UserRegister(UserId, BloodType, Counter, IsLocationAv, IsAlltimes, IsAvaiable, IsMessageAv);
        }
        
        public System.Threading.Tasks.Task<bool> UserRegisterAsync(string UserId, string BloodType, int Counter, bool IsLocationAv, bool IsAlltimes, bool IsAvaiable, bool IsMessageAv) {
            return base.Channel.UserRegisterAsync(UserId, BloodType, Counter, IsLocationAv, IsAlltimes, IsAvaiable, IsMessageAv);
        }
        
        public BloodDonation.HospitalClient.WebService.User SelectUser(string UserId) {
            return base.Channel.SelectUser(UserId);
        }
        
        public System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.User> SelectUserAsync(string UserId) {
            return base.Channel.SelectUserAsync(UserId);
        }
        
        public bool UserUpdateTime(string UserId, int Day, int Time, bool IsAvaiable) {
            return base.Channel.UserUpdateTime(UserId, Day, Time, IsAvaiable);
        }
        
        public System.Threading.Tasks.Task<bool> UserUpdateTimeAsync(string UserId, int Day, int Time, bool IsAvaiable) {
            return base.Channel.UserUpdateTimeAsync(UserId, Day, Time, IsAvaiable);
        }
        
        public BloodDonation.HospitalClient.WebService.Times[] SelectUserTime(string UserId) {
            return base.Channel.SelectUserTime(UserId);
        }
        
        public System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Times[]> SelectUserTimeAsync(string UserId) {
            return base.Channel.SelectUserTimeAsync(UserId);
        }
        
        public bool UserDelete(string DonorId) {
            return base.Channel.UserDelete(DonorId);
        }
        
        public System.Threading.Tasks.Task<bool> UserDeleteAsync(string DonorId) {
            return base.Channel.UserDeleteAsync(DonorId);
        }
        
        public bool UserLocationUpdate(string UserId, string Name, bool IsLocationAv, decimal Latitude, decimal Longitude) {
            return base.Channel.UserLocationUpdate(UserId, Name, IsLocationAv, Latitude, Longitude);
        }
        
        public System.Threading.Tasks.Task<bool> UserLocationUpdateAsync(string UserId, string Name, bool IsLocationAv, decimal Latitude, decimal Longitude) {
            return base.Channel.UserLocationUpdateAsync(UserId, Name, IsLocationAv, Latitude, Longitude);
        }
        
        public BloodDonation.HospitalClient.WebService.Hospital[] SelectUserLocation(string UserId) {
            return base.Channel.SelectUserLocation(UserId);
        }
        
        public System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Hospital[]> SelectUserLocationAsync(string UserId) {
            return base.Channel.SelectUserLocationAsync(UserId);
        }
        
        public BloodDonation.HospitalClient.WebService.Hospital[] SelectHospital() {
            return base.Channel.SelectHospital();
        }
        
        public System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Hospital[]> SelectHospitalAsync() {
            return base.Channel.SelectHospitalAsync();
        }
        
        public bool UserLocationDelete(string UserId, string Name) {
            return base.Channel.UserLocationDelete(UserId, Name);
        }
        
        public System.Threading.Tasks.Task<bool> UserLocationDeleteAsync(string UserId, string Name) {
            return base.Channel.UserLocationDeleteAsync(UserId, Name);
        }
        
        public bool UserUpdateGeneral(string DonorId, string BloodType, int DonationCounter, bool IsLocationAv, bool IsAlltimes, bool IsAvaiable, bool IsMessageAv) {
            return base.Channel.UserUpdateGeneral(DonorId, BloodType, DonationCounter, IsLocationAv, IsAlltimes, IsAvaiable, IsMessageAv);
        }
        
        public System.Threading.Tasks.Task<bool> UserUpdateGeneralAsync(string DonorId, string BloodType, int DonationCounter, bool IsLocationAv, bool IsAlltimes, bool IsAvaiable, bool IsMessageAv) {
            return base.Channel.UserUpdateGeneralAsync(DonorId, BloodType, DonationCounter, IsLocationAv, IsAlltimes, IsAvaiable, IsMessageAv);
        }
        
        public bool ControlHospitalUser(int HospitalId, string UserName, string UserPassword) {
            return base.Channel.ControlHospitalUser(HospitalId, UserName, UserPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ControlHospitalUserAsync(int HospitalId, string UserName, string UserPassword) {
            return base.Channel.ControlHospitalUserAsync(HospitalId, UserName, UserPassword);
        }
        
        public BloodDonation.HospitalClient.WebService.Notification SelectNotification(int NotificationId) {
            return base.Channel.SelectNotification(NotificationId);
        }
        
        public System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Notification> SelectNotificationAsync(int NotificationId) {
            return base.Channel.SelectNotificationAsync(NotificationId);
        }
        
        public bool UpdateStateNotification(int NotificationId) {
            return base.Channel.UpdateStateNotification(NotificationId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateStateNotificationAsync(int NotificationId) {
            return base.Channel.UpdateStateNotificationAsync(NotificationId);
        }
        
        public void SelectUserNotificationAccept(int HospitalId, int UserId, string BloodType) {
            base.Channel.SelectUserNotificationAccept(HospitalId, UserId, BloodType);
        }
        
        public System.Threading.Tasks.Task SelectUserNotificationAcceptAsync(int HospitalId, int UserId, string BloodType) {
            return base.Channel.SelectUserNotificationAcceptAsync(HospitalId, UserId, BloodType);
        }
        
        public bool DeleteAllUserLocations(string UserId) {
            return base.Channel.DeleteAllUserLocations(UserId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAllUserLocationsAsync(string UserId) {
            return base.Channel.DeleteAllUserLocationsAsync(UserId);
        }
        
        public bool UpdateAllUserTimes(string UserId, bool IsAvaiable) {
            return base.Channel.UpdateAllUserTimes(UserId, IsAvaiable);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAllUserTimesAsync(string UserId, bool IsAvaiable) {
            return base.Channel.UpdateAllUserTimesAsync(UserId, IsAvaiable);
        }
        
        public bool AddToken(string UserId, string Token) {
            return base.Channel.AddToken(UserId, Token);
        }
        
        public System.Threading.Tasks.Task<bool> AddTokenAsync(string UserId, string Token) {
            return base.Channel.AddTokenAsync(UserId, Token);
        }
        
        public System.Data.DataTable NotificationAccept(int HospitalId) {
            return base.Channel.NotificationAccept(HospitalId);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> NotificationAcceptAsync(int HospitalId) {
            return base.Channel.NotificationAcceptAsync(HospitalId);
        }
        
        public bool NotificationFinished(int HospitalId, string BloodType) {
            return base.Channel.NotificationFinished(HospitalId, BloodType);
        }
        
        public System.Threading.Tasks.Task<bool> NotificationFinishedAsync(int HospitalId, string BloodType) {
            return base.Channel.NotificationFinishedAsync(HospitalId, BloodType);
        }
        
        public bool SendMessage(string UserId, int HospitalId, bool IsPerson, string Content) {
            return base.Channel.SendMessage(UserId, HospitalId, IsPerson, Content);
        }
        
        public System.Threading.Tasks.Task<bool> SendMessageAsync(string UserId, int HospitalId, bool IsPerson, string Content) {
            return base.Channel.SendMessageAsync(UserId, HospitalId, IsPerson, Content);
        }
        
        public BloodDonation.HospitalClient.WebService.Notification GetActiveNotification(string UserId) {
            return base.Channel.GetActiveNotification(UserId);
        }
        
        public System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Notification> GetActiveNotificationAsync(string UserId) {
            return base.Channel.GetActiveNotificationAsync(UserId);
        }
        
        public BloodDonation.HospitalClient.WebService.Notification GetNotFinishedNotification(string UserId) {
            return base.Channel.GetNotFinishedNotification(UserId);
        }
        
        public System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Notification> GetNotFinishedNotificationAsync(string UserId) {
            return base.Channel.GetNotFinishedNotificationAsync(UserId);
        }
        
        public BloodDonation.HospitalClient.WebService.Message[] GetAllMessages(string UserId, int HospitalId) {
            return base.Channel.GetAllMessages(UserId, HospitalId);
        }
        
        public System.Threading.Tasks.Task<BloodDonation.HospitalClient.WebService.Message[]> GetAllMessagesAsync(string UserId, int HospitalId) {
            return base.Channel.GetAllMessagesAsync(UserId, HospitalId);
        }
        
        public bool UpdateReadNotification(int NotificationId) {
            return base.Channel.UpdateReadNotification(NotificationId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateReadNotificationAsync(int NotificationId) {
            return base.Channel.UpdateReadNotificationAsync(NotificationId);
        }
    }
}
